"use strict";
/* eslint-disable */
/* generated by definy. Do not edit! */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionDetail = exports.FunctionNamespace = exports.Type = exports.Pattern = exports.Field = exports.TypeBody = exports.TypeAttribute = exports.TypeParameterInfo = exports.DefinyRpcTypeInfo = exports.Namespace = exports.Result = exports.Maybe = exports.Set = exports.Map = exports.List = exports.StructuredJsonValue = exports.Number = exports.Bool = exports.Unit = exports.String = void 0;
/**
 * 文字列
 */
exports.String = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "String",
        parameters: [],
    }),
};
/**
 * 値が1つだけ
 */
exports.Unit = {
    type: () => exports.Type.from({ namespace: exports.Namespace.coreType, name: "Unit", parameters: [] }),
};
/**
 * Bool. boolean. 真偽値. True か False
 */
exports.Bool = {
    type: () => exports.Type.from({ namespace: exports.Namespace.coreType, name: "Bool", parameters: [] }),
};
/**
 * 64bit 浮動小数点数
 */
exports.Number = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Number",
        parameters: [],
    }),
};
/**
 * 構造化されたJSON
 */
exports.StructuredJsonValue = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "StructuredJsonValue",
        parameters: [],
    }),
    string: (p) => ({
        type: "string",
        value: p,
        [Symbol.toStringTag]: "*coreType.StructuredJsonValue",
    }),
    array: (p) => ({
        type: "array",
        value: p,
        [Symbol.toStringTag]: "*coreType.StructuredJsonValue",
    }),
    boolean: (p) => ({
        type: "boolean",
        value: p,
        [Symbol.toStringTag]: "*coreType.StructuredJsonValue",
    }),
    null: { type: "null", [Symbol.toStringTag]: "*coreType.StructuredJsonValue" },
    number: (p) => ({
        type: "number",
        value: p,
        [Symbol.toStringTag]: "*coreType.StructuredJsonValue",
    }),
    object: (p) => ({
        type: "object",
        value: p,
        [Symbol.toStringTag]: "*coreType.StructuredJsonValue",
    }),
};
/**
 * リスト
 */
exports.List = {
    type: (element) => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "List",
        parameters: [element],
    }),
};
/**
 * 辞書型. Map, Dictionary
 */
exports.Map = {
    type: (key, value) => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Map",
        parameters: [key, value],
    }),
};
/**
 * Set. 集合
 */
exports.Set = {
    type: (element) => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Set",
        parameters: [element],
    }),
};
exports.Maybe = {
    type: (element) => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Maybe",
        parameters: [element],
    }),
    just: (p) => ({
        type: "just",
        value: p,
        [Symbol.toStringTag]: "*coreType.Maybe",
    }),
    nothing: () => ({
        type: "nothing",
        [Symbol.toStringTag]: "*coreType.Maybe",
    }),
};
exports.Result = {
    type: (ok, error) => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Result",
        parameters: [ok, error],
    }),
    ok: (p) => ({
        type: "ok",
        value: p,
        [Symbol.toStringTag]: "*coreType.Result",
    }),
    error: (p) => ({
        type: "error",
        value: p,
        [Symbol.toStringTag]: "*coreType.Result",
    }),
};
/**
 * 名前空間. ユーザーが生成するものがこっちが用意するものか
 */
exports.Namespace = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Namespace",
        parameters: [],
    }),
    local: (p) => ({
        type: "local",
        value: p,
        [Symbol.toStringTag]: "*coreType.Namespace",
    }),
    coreType: { type: "coreType", [Symbol.toStringTag]: "*coreType.Namespace" },
    typedJson: { type: "typedJson", [Symbol.toStringTag]: "*coreType.Namespace" },
    request: { type: "request", [Symbol.toStringTag]: "*coreType.Namespace" },
    meta: { type: "meta", [Symbol.toStringTag]: "*coreType.Namespace" },
};
/**
 * definy RPC 型の構造
 */
exports.DefinyRpcTypeInfo = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "DefinyRpcTypeInfo",
        parameters: [],
    }),
    from: (obj) => ({
        namespace: obj.namespace,
        name: obj.name,
        description: obj.description,
        parameter: obj.parameter,
        attribute: obj.attribute,
        body: obj.body,
        [Symbol.toStringTag]: "*coreType.DefinyRpcTypeInfo",
    }),
};
/**
 * 型パラメータ名と説明文
 */
exports.TypeParameterInfo = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "TypeParameterInfo",
        parameters: [],
    }),
    from: (obj) => ({
        name: obj.name,
        description: obj.description,
        [Symbol.toStringTag]: "*coreType.TypeParameterInfo",
    }),
};
/**
 * 型をどのような特殊な扱いをするかどうか
 */
exports.TypeAttribute = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "TypeAttribute",
        parameters: [],
    }),
    asType: { type: "asType", [Symbol.toStringTag]: "*coreType.TypeAttribute" },
};
/**
 * 型の構造を表現する
 */
exports.TypeBody = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "TypeBody",
        parameters: [],
    }),
    string: { type: "string", [Symbol.toStringTag]: "*coreType.TypeBody" },
    number: { type: "number", [Symbol.toStringTag]: "*coreType.TypeBody" },
    boolean: { type: "boolean", [Symbol.toStringTag]: "*coreType.TypeBody" },
    unit: { type: "unit", [Symbol.toStringTag]: "*coreType.TypeBody" },
    list: { type: "list", [Symbol.toStringTag]: "*coreType.TypeBody" },
    set: { type: "set", [Symbol.toStringTag]: "*coreType.TypeBody" },
    map: { type: "map", [Symbol.toStringTag]: "*coreType.TypeBody" },
    url: { type: "url", [Symbol.toStringTag]: "*coreType.TypeBody" },
    product: (p) => ({
        type: "product",
        value: p,
        [Symbol.toStringTag]: "*coreType.TypeBody",
    }),
    sum: (p) => ({
        type: "sum",
        value: p,
        [Symbol.toStringTag]: "*coreType.TypeBody",
    }),
};
/**
 * product 直積型で使う
 */
exports.Field = {
    type: () => exports.Type.from({ namespace: exports.Namespace.coreType, name: "Field", parameters: [] }),
    from: (obj) => ({
        name: obj.name,
        description: obj.description,
        type: obj.type,
        [Symbol.toStringTag]: "*coreType.Field",
    }),
};
/**
 * 直和型の表現
 */
exports.Pattern = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "Pattern",
        parameters: [],
    }),
    from: (obj) => ({
        name: obj.name,
        description: obj.description,
        parameter: obj.parameter,
        [Symbol.toStringTag]: "*coreType.Pattern",
    }),
};
/**
 * 型
 */
exports.Type = {
    type: () => exports.Type.from({ namespace: exports.Namespace.coreType, name: "Type", parameters: [] }),
    from: (obj) => ({
        namespace: obj.namespace,
        name: obj.name,
        parameters: obj.parameters,
        [Symbol.toStringTag]: "*coreType.Type",
        __typeVariable: {},
    }),
};
/**
 * 出力されるAPI関数のモジュール名
 */
exports.FunctionNamespace = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "FunctionNamespace",
        parameters: [],
    }),
    meta: { type: "meta", [Symbol.toStringTag]: "*coreType.FunctionNamespace" },
    local: (p) => ({
        type: "local",
        value: p,
        [Symbol.toStringTag]: "*coreType.FunctionNamespace",
    }),
};
/**
 * 関数のデータ functionByNameの結果
 */
exports.FunctionDetail = {
    type: () => exports.Type.from({
        namespace: exports.Namespace.coreType,
        name: "FunctionDetail",
        parameters: [],
    }),
    from: (obj) => ({
        namespace: obj.namespace,
        name: obj.name,
        description: obj.description,
        input: obj.input,
        output: obj.output,
        needAuthentication: obj.needAuthentication,
        isMutation: obj.isMutation,
        [Symbol.toStringTag]: "*coreType.FunctionDetail",
    }),
};
